{"version":3,"file":"static/js/3.e1ab58e9.chunk.js","mappings":"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","sources":["webpack://02-second-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/withAuthRedirect.tsx","utils/validators/validators.ts","../node_modules/@material-ui/icons/MailOutline.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gyKe4\",\"dialogsItems\":\"Dialogs_dialogsItems__FazGJ\",\"active\":\"Dialogs_active__e6NF5\",\"dialog\":\"Dialogs_dialog__nc59J\",\"avatar\":\"Dialogs_avatar__H19EZ\",\"dialogItem\":\"Dialogs_dialogItem__KqQzQ\",\"messagesBlock\":\"Dialogs_messagesBlock__WUi-T\",\"messages\":\"Dialogs_messages__PEBvU\",\"manage\":\"Dialogs_manage__36sGP\",\"message\":\"Dialogs_message__rsSkE\",\"visibility\":\"Dialogs_visibility__DY1Xw\"};","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../Redux/storeType\";\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path} className={classes.dialogItem}>\r\n                <div>\r\n                    <img className={classes.avatar} src={`${props.avatar}`} alt=\"\"/>\r\n                </div>\r\n                <div>\r\n                    <h5>\r\n                        {props.name}\r\n                    </h5>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../Redux/storeType\";\r\n\r\nconst Message = (props: MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from './Message/Message';\r\nimport {MessagesPageType} from \"../../Redux/storeType\";\r\nimport {useFormik} from 'formik';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport TextField from '@mui/material/TextField';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {validationSchemaDialog} from \"../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    messagesPage: MessagesPageType\r\n    addText: (s: string) => void;\r\n    isAuth: boolean\r\n}\r\ntype PostType = {\r\n    addText: (s: string) => void\r\n}\r\ntype DataType = {\r\n    messageText: string\r\n}\r\n\r\nconst sentData = (values: DataType, addText: (s: string) => void) => {\r\n    let sentData = new Promise<DataType>((resolve) => {\r\n        resolve(values)\r\n    })\r\n    sentData.then(prom => {\r\n        addText(prom.messageText)\r\n    })\r\n}\r\n\r\nconst CreatPost = (props: PostType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            messageText: ''\r\n        },\r\n        validationSchema: validationSchemaDialog,\r\n        onSubmit: (values, {resetForm}) => {\r\n            sentData(values, props.addText)\r\n            resetForm()\r\n        }\r\n    })\r\n\r\n    return (<div>\r\n        <form onSubmit={formik.handleSubmit} className={classes.manage}>\r\n            <div>\r\n                <TextField\r\n                    id=\"messageText\"\r\n                    name=\"messageText\"\r\n                    value={formik.values.messageText}\r\n                    onChange={formik.handleChange}\r\n                    error={formik.touched.messageText && Boolean(formik.errors.messageText)}\r\n                    helperText={formik.touched.messageText && formik.errors.messageText}\r\n                    label=\"Message Text\"\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <MailOutlineIcon/>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    variant=\"standard\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button color=\"primary\" size='small' variant=\"contained\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    </div>)\r\n}\r\nconst Dialogs = (props: PropsType) => {\r\n    let dialogsElements = props.messagesPage.dialogsData.map(\r\n        (d) => <DialogItem key={d.id} avatar={d.avatar} name={d.name} id={d.id}/>\r\n    )\r\n    let messagesElements = props.messagesPage.messagesData.map(\r\n        (m) => <Message key={m.id} message={m.message} id={m.id}/>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div>\r\n                <div className={classes.messagesBlock}>\r\n                    <div className={classes.messages}>\r\n                        {messagesElements}\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <CreatPost addText={props.addText}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import React, {useEffect} from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessageActionCreator, MessagesPageType,} from \"../../Redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {UsHoc} from \"../Profile/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    messagesPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\ntype PropsType = {\r\n    messagesPage: MessagesPageType\r\n    addMessageActionCreator: (s: string) => void;\r\n    isAuth: boolean\r\n}\r\n\r\nconst DialogsContainer = (props: PropsType) => {\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        navigate(`${UsHoc(props.isAuth, '/dialogs')}`)\r\n    }, [])\r\n    return (\r\n        <Dialogs {...props}\r\n                 addText={props.addMessageActionCreator}/>\r\n    )\r\n}\r\nlet mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessageActionCreator})\r\n)(DialogsContainer)\r\n","import React from \"react\";\r\n\r\n\r\nexport const UsHoc = (isAuth: boolean, path = '/profile') => {\r\n    if (!isAuth) {\r\n        return '/login'\r\n    } else {\r\n        return path\r\n    }\r\n}","import * as yup from 'yup';\r\n\r\nexport const validationSchema = yup.object({\r\n    fullName: yup.string().required('Full Name is required'),\r\n    aboutMe: yup.string().required('About Me is required'),\r\n});\r\nexport const validationSchemaPost = yup.object({\r\n    postText: yup.string().required('Post text is required'),\r\n});\r\nexport const validationSchemaLogin = yup.object({\r\n    email: yup.string().required('Email text is required'),\r\n    password: yup.string().required('Password text is required'),\r\n});\r\nexport const validationSchemaDialog = yup.object({\r\n    messageText: yup.string().required('Message text is required')\r\n});","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H4V8l8 5 8-5v10zm-8-7L4 6h16l-8 5z\"\n}), 'MailOutline');\n\nexports.default = _default;"],"names":["props","path","id","className","classes","to","src","avatar","alt","name","message","CreatPost","formik","useFormik","initialValues","messageText","validationSchema","validationSchemaDialog","onSubmit","values","resetForm","addText","Promise","resolve","then","prom","sentData","handleSubmit","TextField","value","onChange","handleChange","error","touched","Boolean","errors","helperText","label","InputProps","startAdornment","InputAdornment","position","MailOutline","variant","Button","color","size","type","dialogsElements","messagesPage","dialogsData","map","d","messagesElements","messagesData","m","compose","connect","state","isAuth","auth","addMessageActionCreator","navigate","useNavigate","useEffect","UsHoc","yup","fullName","required","aboutMe","validationSchemaPost","postText","validationSchemaLogin","email","password","_interopRequireDefault","require","_interopRequireWildcard","exports","React","_default","default","createElement"],"sourceRoot":""}