{"version":3,"file":"static/js/321.1b2c96a1.chunk.js","mappings":"iPACA,EAA4B,qB,SCgCtBA,EAAY,SAACC,GACf,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,OACI,0BACI,SAAC,KAAD,CACIC,cACI,CACIC,MAAO,GACPC,SAAU,GACVC,QAAQ,GAGhBC,SAAU,SAAAC,GAAM,OAAKC,EAAAA,EAAAA,IAAeD,IACpCE,SAAU,SAACF,IAtBb,SAACA,EAAkBP,GACd,IAAIU,SAAkB,SAACC,GAClCA,EAAQJ,MAEHK,MAAK,SAAAC,GACVC,MAAM,UACNd,GAASe,EAAAA,EAAAA,IAAUF,EAAKV,MAAOU,EAAKT,SAAUS,EAAKR,YAiBvCW,CAAMT,EAAQP,IAVtB,UAaI,UAAC,KAAD,YACI,4BACI,SAAC,KAAD,CAAOiB,KAAK,QAAQC,KAAK,WACzB,SAAC,KAAD,CAAcA,KAAK,QAAQC,UAAU,YAEzC,4BACI,SAAC,KAAD,CAAOF,KAAK,WAAWC,KAAK,cAC5B,SAAC,KAAD,CAAcA,KAAK,WAAWC,UAAU,QACvCpB,EAAMqB,OAAQ,yBAAMrB,EAAMqB,QAAe,SAE9C,4BACI,SAAC,KAAD,CAAOH,KAAK,WAAWC,KAAK,cAEhC,mBAAQD,KAAK,SAAb,2BA2BpB,GAAeI,EAAAA,EAAAA,KAPO,SAACC,GACnB,MAAQ,CACJC,OAAQD,EAAME,KAAKD,OACnBH,MAAOE,EAAME,KAAKJ,SAI1B,EAnBc,SAACrB,GACX,IAAM0B,GAAWC,EAAAA,EAAAA,MAIjB,OAHAC,EAAAA,EAAAA,YAAU,WACNF,EAAS,GAAD,QAAIG,EAAAA,EAAAA,GAAM7B,EAAMwB,YACzB,CAACxB,EAAMwB,OAAQxB,EAAMqB,SAEpB,iBAAKS,UAAWC,EAAhB,mBAEI,SAAChC,EAAD,CAAWsB,MAAOrB,EAAMqB,e,qDC5E7B,IAAMQ,EAAQ,SAACL,GAAkC,IAAnBQ,EAAkB,uDAAb,WACtC,OAAIR,EAIOQ,EAHA,W,sGCIR,IAAMvB,EAAiB,SAACD,GAC3B,IAAMyB,EAAoB,GAY1B,OAXKzB,EAAOJ,MAIP,2CAA2C8B,KAAK1B,EAAOJ,OAIlDI,EAAOH,WACb4B,EAAO5B,SAAW,YAHlB4B,EAAO7B,MAAQ,wBALf6B,EAAO7B,MAAQ,WAUZ6B,GAEEE,EAAgB,SAAC3B,EAAa4B,GACvC,IAAMH,EAAoB,GAO1B,OANKzB,EAAO6B,SAED7B,EAAO6B,SAASC,OAASF,IAEhCH,EAAOI,SAAP,iMAAsDD,IAHtDH,EAAOI,SAAW,WAKfJ,GAEEM,EAAmB,SAAC/B,EAAa4B,GAC1C,IAAMH,EAAiB,GAMvB,OALIzB,EAAOgC,YAEFhC,EAAOgC,YAAYF,OAAOF,IAC/BH,EAAOO,YAAP,iMAAuDJ,IAFvDH,EAAOO,YAAY,WAIhBP","sources":["webpack://02-second-project/./src/components/Login/s.module.css?057a","components/Login/Login.tsx","components/Profile/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"s_loginForm__101TP\"};","import React, {useEffect} from \"react\";\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\r\nimport {loginUser} from \"../../Redux/auth-reducer\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {loginValidator} from \"../../utils/validators/validators\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {UsHoc} from \"../Profile/withAuthRedirect\";\r\nimport {StoreType} from \"../../Redux/reduxStore\";\r\nimport s from './s.module.css'\r\n\r\ntype DataType = {\r\n    email: string\r\n    password: string\r\n    toggle: boolean\r\n}\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    error: string | undefined\r\n}\r\ntype LoginFormType = {\r\n    error: string | undefined\r\n}\r\nconst login = (values: DataType, dispatch: ThunkDispatch<Dispatch, Store, any>) => {\r\n    let sentData = new Promise<DataType>((resolve) => {\r\n        resolve(values)\r\n    })\r\n    sentData.then(data => {\r\n        alert('Hello!')\r\n        dispatch(loginUser(data.email, data.password, data.toggle))\r\n    })\r\n}\r\nconst LoginForm = (props: LoginFormType) => {\r\n    const dispatch = useDispatch<ThunkDispatch<Dispatch, Store, any>>()\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={\r\n                    {\r\n                        email: '',\r\n                        password: '',\r\n                        toggle: false\r\n                    }\r\n                }\r\n                validate={values => (loginValidator(values))}\r\n                onSubmit={(values) => {\r\n                    login(values, dispatch)\r\n                }}\r\n            >\r\n                <Form>\r\n                    <div>\r\n                        <Field type=\"email\" name=\"email\"/>\r\n                        <ErrorMessage name=\"email\" component=\"div\"/>\r\n                    </div>\r\n                    <div>\r\n                        <Field type=\"password\" name=\"password\"/>\r\n                        <ErrorMessage name=\"password\" component=\"div\"/>\r\n                        {props.error ? <div>{props.error}</div> : null}\r\n                    </div>\r\n                    <label>\r\n                        <Field type=\"checkbox\" name=\"toggle\"/>\r\n                    </label>\r\n                    <button type=\"submit\">\r\n                        Login\r\n                    </button>\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\nconst Login = (props: PropsType) => {\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        navigate(`${UsHoc(props.isAuth)}`)\r\n    }, [props.isAuth, props.error])\r\n    return (\r\n        <div className={s.loginForm}>\r\n            Hello\r\n            <LoginForm error={props.error}/>\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state: StoreType) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth,\r\n        error: state.auth.error\r\n    })\r\n\r\n}\r\nexport default connect(mapStateToProps)(Login)\r\n","import React from \"react\";\r\n\r\n\r\nexport const UsHoc = (isAuth:boolean,path='/profile')=>{\r\n    if(!isAuth){\r\n        return '/login'\r\n    }\r\n    else {\r\n        return path\r\n    }\r\n}\r\n//  const useAuthRedicrectComponent = (Component:any) => {\r\n//     return function RedirectComponent (props:WithLoadingProps){\r\n//         const navigate = useNavigate();\r\n//         if(!props.isAuth){\r\n//                 navigate( '/login')\r\n//         }\r\n//         return <Component {...props} />\r\n//     }\r\n// }","import React from \"react\";\r\n\r\ntype ErrorType = {\r\n    email?: string\r\n    password?: string\r\n    postText?: string\r\n    messageText?:string\r\n}\r\n\r\nexport const loginValidator = (values: any) => {\r\n    const errors: ErrorType = {};\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    }\r\n    else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    else if (!values.password) {\r\n        errors.password = 'Required';\r\n    }\r\n    return errors;\r\n}\r\nexport const postValidator = (values: any, maxLength: number) => {\r\n    const errors: ErrorType = {};\r\n    if (!values.postText) {\r\n        errors.postText = 'Required';\r\n    } else if (values.postText.length > maxLength)\r\n    {\r\n        errors.postText = `Максимальное количество символов ${maxLength}`\r\n    }\r\n    return errors;\r\n}\r\nexport const messageValidator = (values: any, maxLength: number)=>{\r\n    const errors:ErrorType={}\r\n    if(!values.messageText){\r\n        errors.messageText='Required'\r\n    }else if(values.messageText.length>maxLength){\r\n        errors.messageText=`Максимальное количество символов ${maxLength}`\r\n    }\r\n    return errors;\r\n}"],"names":["LoginForm","props","dispatch","useDispatch","initialValues","email","password","toggle","validate","values","loginValidator","onSubmit","Promise","resolve","then","data","alert","loginUser","login","type","name","component","error","connect","state","isAuth","auth","navigate","useNavigate","useEffect","UsHoc","className","s","path","errors","test","postValidator","maxLength","postText","length","messageValidator","messageText"],"sourceRoot":""}