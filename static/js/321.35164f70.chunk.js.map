{"version":3,"file":"static/js/321.35164f70.chunk.js","mappings":"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","sources":["webpack://02-second-project/./src/components/Login/s.module.css?057a","components/Login/Login.tsx","components/Profile/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"s_loginForm__101TP\",\"login\":\"s_login__bPAHx\",\"field\":\"s_field__fIpVg\",\"animation\":\"s_animation__WT6SP\",\"visibility\":\"s_visibility__kPvY-\",\"warning\":\"s_warning__zJinO\",\"captcha\":\"s_captcha__zTy7T\",\"button\":\"s_button__Cb0hu\"};","import React, {useEffect} from \"react\";\r\nimport {useFormik} from 'formik';\r\nimport {loginUser} from \"../../Redux/auth-reducer\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {Dispatch, Store} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {validationSchemaLogin} from \"../../utils/validators/validators\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {UsHoc} from \"../Profile/withAuthRedirect\";\r\nimport {StoreType} from \"../../Redux/reduxStore\";\r\nimport s from './s.module.css'\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport {Typography} from '@mui/material';\r\n\r\ntype DataType = {\r\n    email: string\r\n    password: string\r\n    toggle: boolean\r\n    captcha: string\r\n}\r\ntype PropsType = {\r\n    captcha: string\r\n    isAuth: boolean\r\n    error: string | undefined\r\n}\r\ntype LoginFormType = {\r\n    error: string | undefined\r\n    captcha: string\r\n}\r\nconst login = (values: DataType, dispatch: ThunkDispatch<Dispatch, Store, any>) => {\r\n    let sentData = new Promise<DataType>((resolve) => {\r\n        resolve(values)\r\n    })\r\n    sentData.then(data => {\r\n        dispatch(loginUser(data.email, data.password, data.toggle, data.captcha))\r\n    })\r\n}\r\n\r\nconst LoginForm = (props: LoginFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            toggle: false,\r\n            captcha: ''\r\n        },\r\n        validationSchema: validationSchemaLogin,\r\n        onSubmit: (values) => {\r\n            login(values, dispatch)\r\n        }\r\n    });\r\n    const dispatch = useDispatch<ThunkDispatch<Dispatch, Store, any>>()\r\n    return (\r\n        <div className='loginForm'>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={s.loginBlock}>\r\n                    <div className={s.field}>\r\n                        <TextField\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            label=\"Email\"\r\n                            value={formik.values.email}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.email && Boolean(formik.errors.email)}\r\n                            helperText={formik.touched.email && formik.errors.email}\r\n                        />\r\n                    </div>\r\n                    <div className={s.field}>\r\n                        <TextField\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            value={formik.values.password}\r\n                            onChange={formik.handleChange}\r\n                            error={formik.touched.password && Boolean(formik.errors.password)}\r\n                            helperText={formik.touched.password && formik.errors.password}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"toggle\">Save Me</label>\r\n                        <Checkbox\r\n                            id=\"toggle\"\r\n                            name=\"toggle\"\r\n                            size='small'\r\n                            checked={formik.values.toggle}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                    </div>\r\n                    {props.captcha && <div className={s.animation}>\r\n                        <div>\r\n                            <img className={s.captcha} src={props.captcha} alt=\"Captcha\"/>\r\n                        </div>\r\n                        <TextField\r\n                            id=\"captcha\"\r\n                            name=\"captcha\"\r\n                            label=\"captcha\"\r\n                            type=\"captcha\"\r\n                            value={formik.values.captcha}\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                    </div>}\r\n                    {props.error &&\r\n                        <Typography className={s.warning} variant='subtitle1'>{props.error}</Typography>}\r\n                    <div className={s.button}>\r\n                        <Button color='primary' variant='contained' size='small' type=\"submit\">\r\n                            Login\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nconst Login = (props: PropsType) => {\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        navigate(`${UsHoc(props.isAuth)}`)\r\n    }, [props.isAuth, props.error])\r\n    return (\r\n        <div className={s.login}>\r\n            <p> Need to register here: <br/>\r\n                https://social-network.samuraijs.com/\r\n                <br/>\r\n                Use your login and password her\r\n            </p>\r\n            <LoginForm captcha={props.captcha} error={props.error}/>\r\n        </div>\r\n    )\r\n}\r\nlet mapStateToProps = (state: StoreType) => {\r\n    return ({\r\n        isAuth: state.auth.isAuth,\r\n        error: state.auth.error,\r\n        captcha: state.auth.captcha\r\n    })\r\n\r\n}\r\nexport default connect(mapStateToProps)(Login)\r\n","import React from \"react\";\r\n\r\n\r\nexport const UsHoc = (isAuth: boolean, path = '/profile') => {\r\n    if (!isAuth) {\r\n        return '/login'\r\n    } else {\r\n        return path\r\n    }\r\n}","import * as yup from 'yup';\r\n\r\nexport const validationSchema = yup.object({\r\n    fullName: yup.string().required('Full Name is required'),\r\n    aboutMe: yup.string().required('About Me is required'),\r\n});\r\nexport const validationSchemaPost = yup.object({\r\n    postText: yup.string().required('Post text is required'),\r\n});\r\nexport const validationSchemaLogin = yup.object({\r\n    email: yup.string().required('Email text is required'),\r\n    password: yup.string().required('Password text is required'),\r\n});\r\nexport const validationSchemaDialog = yup.object({\r\n    messageText: yup.string().required('Message text is required')\r\n});"],"names":["LoginForm","props","formik","useFormik","initialValues","email","password","toggle","captcha","validationSchema","validationSchemaLogin","onSubmit","values","dispatch","Promise","resolve","then","data","loginUser","login","useDispatch","className","handleSubmit","s","TextField","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","htmlFor","Checkbox","size","checked","src","alt","Typography","variant","Button","color","connect","state","isAuth","auth","navigate","useNavigate","useEffect","UsHoc","path","yup","fullName","required","aboutMe","validationSchemaPost","postText","validationSchemaDialog","messageText"],"sourceRoot":""}