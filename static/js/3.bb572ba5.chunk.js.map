{"version":3,"file":"static/js/3.bb572ba5.chunk.js","mappings":"gMACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA2K,wBAA3K,EAA8M,0BAA9M,EAAkP,yB,mBCclP,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,WACI,gBAAKE,UAAWC,EAAgBE,IAAG,UAAKN,EAAMO,QAAUC,IAAI,KAAKR,EAAMS,WCFvF,EALgB,SAACT,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMU,W,oBC0B1CC,EAAY,SAACX,GACf,OAAO,0BACH,SAAC,KAAD,CACIY,cAAe,CACXC,YAAa,IAEjBC,SAAU,SAAAC,GAAM,OAAKC,EAAAA,EAAAA,IAAiBD,EAAO,KAC7CE,SAAU,SAACF,EAAD,GAA0B,IAAhBG,EAAe,EAAfA,WAlBf,SAACH,EAAkBI,GACjB,IAAIC,SAAkB,SAACC,GAClCA,EAAQN,MAEHO,MAAK,SAAAC,GACVC,MAAM,QACNC,QAAQC,IAAIH,EAAKV,aACjBM,EAAQI,EAAKV,gBAYLc,CAASZ,EAAQf,EAAMmB,SACvBD,IACAO,QAAQC,IAAIX,IARpB,UAYI,UAAC,KAAD,YACI,SAAC,KAAD,CAAOb,GAAG,cAAcO,KAAK,cAAcmB,YAAY,0BACvD,mBAAQC,KAAK,SAAb,qBACA,SAAC,KAAD,CAAcpB,KAAK,cAAcqB,UAAU,gBA2B3D,EAtBgB,SAAC9B,GACb,IAAI+B,EAAkB/B,EAAMgC,aAAaC,YAAYC,KACjD,SAACC,GAAD,OAAO,SAAC,EAAD,CAAuB5B,OAAQ4B,EAAE5B,OAAQE,KAAM0B,EAAE1B,KAAMP,GAAIiC,EAAEjC,IAA5CiC,EAAEjC,OAE1BkC,EAAmBpC,EAAMgC,aAAaK,aAAaH,KACnD,SAACI,GAAD,OAAO,SAAC,EAAD,CAAoB5B,QAAS4B,EAAE5B,QAASR,GAAIoC,EAAEpC,IAAhCoC,EAAEpC,OAG3B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK2B,KAEL,gBAAK5B,UAAWC,EAAhB,SACKgC,KAEL,0BACI,SAACzB,EAAD,CAAWQ,QAASnB,EAAMmB,gB,iDCnC1C,GAAeoB,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACC,GACnB,MAAO,CACHT,aAAcS,EAAMT,aACpBU,OAAQD,EAAME,KAAKD,UAIE,CAACE,wBAAAA,EAAAA,IAD9B,EAhByB,SAAC5C,GACtB,IAAM6C,GAAWC,EAAAA,EAAAA,MAIjB,OAHAC,EAAAA,EAAAA,YAAU,WACNF,EAAS,GAAD,QAAIG,EAAAA,EAAAA,GAAMhD,EAAM0C,OAAO,gBAChC,KAEC,SAAC,GAAD,kBAAa1C,GAAb,IACSmB,QAASnB,EAAM4C,+B,qDCvBzB,IAAMI,EAAQ,SAACN,GAAkC,IAAnBzC,EAAkB,uDAAb,WACtC,OAAIyC,EAIOzC,EAHA,W,sGCIR,IAAMgD,EAAiB,SAAClC,GAC3B,IAAMmC,EAAoB,GAY1B,OAXKnC,EAAOoC,MAIP,2CAA2CC,KAAKrC,EAAOoC,OAIlDpC,EAAOsC,WACbH,EAAOG,SAAW,YAHlBH,EAAOC,MAAQ,wBALfD,EAAOC,MAAQ,WAUZD,GAEEI,EAAgB,SAACvC,EAAawC,GACvC,IAAML,EAAoB,GAO1B,OANKnC,EAAOyC,SAEDzC,EAAOyC,SAASC,OAASF,IAEhCL,EAAOM,SAAP,iMAAsDD,IAHtDL,EAAOM,SAAW,WAKfN,GAEElC,EAAmB,SAACD,EAAawC,GAC1C,IAAML,EAAiB,GAMvB,OALInC,EAAOF,YAEFE,EAAOF,YAAY4C,OAAOF,IAC/BL,EAAOrC,YAAP,iMAAuD0C,IAFvDL,EAAOrC,YAAY,WAIhBqC","sources":["webpack://02-second-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gyKe4\",\"dialogsItems\":\"Dialogs_dialogsItems__FazGJ\",\"active\":\"Dialogs_active__e6NF5\",\"avatar\":\"Dialogs_avatar__H19EZ\",\"dialog\":\"Dialogs_dialog__nc59J\",\"messages\":\"Dialogs_messages__PEBvU\",\"message\":\"Dialogs_message__rsSkE\"};","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../Redux/store\";\r\n\r\nconst DialogItem = (props:DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={path}>\r\n                <img className={classes.avatar} src={`${props.avatar}`} alt=\"\"/>{props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {MessageType} from \"../../../Redux/store\";\r\nconst Message = (props:MessageType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message;","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from './Message/Message';\r\nimport {MessagesPageType} from \"../../Redux/store\";\r\nimport {ErrorMessage, Field, Form, Formik} from 'formik';\r\nimport {messageValidator} from \"../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n    messagesPage: MessagesPageType\r\n    addText: (s: string) => void;\r\n    isAuth: boolean\r\n}\r\ntype PostType = {\r\n    addText: (s: string) => void\r\n}\r\ntype DataType = {\r\n    messageText: string\r\n}\r\n\r\nconst sentData = (values: DataType, addText: (s: string) => void) => {\r\n    let sentData = new Promise<DataType>((resolve) => {\r\n        resolve(values)\r\n    })\r\n    sentData.then(prom => {\r\n        alert('Sent')\r\n        console.log(prom.messageText)\r\n        addText(prom.messageText)\r\n    })\r\n}\r\n\r\nconst CreatPost = (props: PostType) => {\r\n    return <div>\r\n        <Formik\r\n            initialValues={{\r\n                messageText: '',\r\n            }}\r\n            validate={values => (messageValidator(values,10))}\r\n            onSubmit={(values, {resetForm}) => {\r\n                sentData(values, props.addText);\r\n                resetForm();\r\n                console.log(values);\r\n            }\r\n            }\r\n        >\r\n            <Form>\r\n                <Field id=\"messageText\" name=\"messageText\" placeholder=\"Type your message...\"/>\r\n                <button type=\"submit\">Submit</button>\r\n                <ErrorMessage name=\"messageText\" component=\"div\"/>\r\n            </Form>\r\n        </Formik>\r\n    </div>;\r\n}\r\nconst Dialogs = (props: PropsType) => {\r\n    let dialogsElements = props.messagesPage.dialogsData.map(\r\n        (d) => <DialogItem key={d.id} avatar={d.avatar} name={d.name} id={d.id}/>\r\n    )\r\n    let messagesElements = props.messagesPage.messagesData.map(\r\n        (m) => <Message key={m.id} message={m.message} id={m.id}/>\r\n    )\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div>\r\n                <CreatPost addText={props.addText}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Dialogs;","import React, {useEffect} from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {addMessageActionCreator, MessagesPageType,} from \"../../Redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../Redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {UsHoc} from \"../Profile/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    messagesPage: MessagesPageType\r\n    isAuth: boolean\r\n}\r\ntype PropsType = {\r\n    messagesPage: MessagesPageType\r\n    addMessageActionCreator: (s: string) => void;\r\n    isAuth: boolean\r\n}\r\n\r\nconst DialogsContainer = (props: PropsType) => {\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        navigate(`${UsHoc(props.isAuth,'/dialogs')}`)\r\n    }, [])\r\n    return (\r\n        <Dialogs {...props}\r\n                 addText={props.addMessageActionCreator}/>\r\n    )\r\n}\r\nlet mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, {addMessageActionCreator})\r\n)(DialogsContainer)\r\n","import React from \"react\";\r\n\r\n\r\nexport const UsHoc = (isAuth:boolean,path='/profile')=>{\r\n    if(!isAuth){\r\n        return '/login'\r\n    }\r\n    else {\r\n        return path\r\n    }\r\n}\r\n//  const useAuthRedicrectComponent = (Component:any) => {\r\n//     return function RedirectComponent (props:WithLoadingProps){\r\n//         const navigate = useNavigate();\r\n//         if(!props.isAuth){\r\n//                 navigate( '/login')\r\n//         }\r\n//         return <Component {...props} />\r\n//     }\r\n// }","import React from \"react\";\r\n\r\ntype ErrorType = {\r\n    email?: string\r\n    password?: string\r\n    postText?: string\r\n    messageText?:string\r\n}\r\n\r\nexport const loginValidator = (values: any) => {\r\n    const errors: ErrorType = {};\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    }\r\n    else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    else if (!values.password) {\r\n        errors.password = 'Required';\r\n    }\r\n    return errors;\r\n}\r\nexport const postValidator = (values: any, maxLength: number) => {\r\n    const errors: ErrorType = {};\r\n    if (!values.postText) {\r\n        errors.postText = 'Required';\r\n    } else if (values.postText.length > maxLength)\r\n    {\r\n        errors.postText = `Максимальное количество символов ${maxLength}`\r\n    }\r\n    return errors;\r\n}\r\nexport const messageValidator = (values: any, maxLength: number)=>{\r\n    const errors:ErrorType={}\r\n    if(!values.messageText){\r\n        errors.messageText='Required'\r\n    }else if(values.messageText.length>maxLength){\r\n        errors.messageText=`Максимальное количество символов ${maxLength}`\r\n    }\r\n    return errors;\r\n}"],"names":["props","path","id","className","classes","to","src","avatar","alt","name","message","CreatPost","initialValues","messageText","validate","values","messageValidator","onSubmit","resetForm","addText","Promise","resolve","then","prom","alert","console","log","sentData","placeholder","type","component","dialogsElements","messagesPage","dialogsData","map","d","messagesElements","messagesData","m","compose","connect","state","isAuth","auth","addMessageActionCreator","navigate","useNavigate","useEffect","UsHoc","loginValidator","errors","email","test","password","postValidator","maxLength","postText","length"],"sourceRoot":""}